/* ----------------------------------------------------------------------------
 * JBarcode - https://github.com/borisklug/jbarcode
 *
 * Written by Boris Klug, https://klg.de/
 * Licensed under the Apache License Version 2.0
 * ---------------------------------------------------------------------------- */
package de.klg.lib.jbarcode.lib;

import java.awt.Graphics;
import java.awt.image.BufferedImage;

import javax.swing.JComponent;

/**
 * Swing bar code component which draws one barcode
 *
 * @author Boris Klug
 */
@SuppressWarnings("serial")
public class BarcodeComponent extends JComponent {

  /**
   * The barcode this component should draw
   */
  private Barcode bc;

  /**
   * If true, the image of the barcode is newly created If false, the data of the
   * barcode was not changed so we can use the cached image This should speedup
   * drawing when the component is resized
   */
  private boolean dirty;

  /**
   * The buffered image, generated by BarcodeRenderer
   */
  private BufferedImage bcimg;

  /**
   * Default constructor without parameters.
   */
  public BarcodeComponent() {
    bc = null;
  }

  /**
   * Paint the component
   */
  @Override
  public void paintComponent(Graphics g) {

    // Clear the whole component first
    g.clearRect(0, 0, this.getWidth(), this.getHeight());

    // See if we have to (re)create the image with the barcode
    if (dirty || bcimg == null) {
      try {
        bcimg = BarcodeRenderer.getBarcodeBufimage(bc);
      } catch (Exception ex) {
        g.drawString("Error!", 30, 30);
        return;
      }
    }

    // now no longer dirty
    dirty = false;

    // Now try to paint the barcode
    int imgwidth = bcimg.getWidth();
    int imgheight = bcimg.getHeight();
    int y = (this.getHeight() / 2) - (imgheight / 2);
    int x = (this.getWidth() / 2) - (imgwidth / 2);
    g.drawImage(bcimg, x, y, null);

    // Draw the cutter line
    g.setColor(java.awt.Color.blue);
    g.drawLine(x - 1, y - 1, x - 6, y - 1); // top left
    g.drawLine(x - 1, y - 1, x - 1, y - 6);
    g.drawLine(x + imgwidth + 1, y - 1, x + imgwidth + 6, y - 1); // top right
    g.drawLine(x + imgwidth + 1, y - 1, x + imgwidth + 1, y - 6);
    g.drawLine(x - 1, y + imgheight + 1, x - 6, y + imgheight + 1); // bottom left
    g.drawLine(x - 1, y + imgheight + 1, x - 1, y + imgheight + 6);
    g.drawLine(x + imgwidth + 1, y + imgheight + 1, x + imgwidth + 6, y + imgheight + 1); // bottom right
    g.drawLine(x + imgwidth + 1, y + imgheight + 1, x + imgwidth + 1, y + imgheight + 6);
  }

  /**
   * Set the barcode to be shown
   */
  public Barcode getBc() {
    dirty = true; // we assume that someone wants to get the barcode
                  // to change something
    return bc;
  }

  /**
   * Get the barcode which will be shown
   */
  public void setBc(Barcode bc) {
    dirty = true;
    this.bc = bc;
  }

}
